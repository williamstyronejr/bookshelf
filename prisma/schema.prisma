// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?        @map("email_verified")
  image          String?          @default("user%2Fdefault.jpeg")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @default(now()) @map("updated_at")
  role           Role             @default(USER)
  reservations   Reservation[]
  accounts       Account[]
  sessions       Session[]
  genreUserCount GenreUserCount[]
  List           List?
  Favorite       Favorite?

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Author {
  id           Int     @id @default(autoincrement())
  slug         String  @unique
  name         String
  bio          String? @default("")
  profileImage String? @map("profile_image")

  books Book[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("authors")
}

model Genre {
  id             BigInt           @id @default(autoincrement()) @db.BigInt
  name           String           @unique
  GenreUserCount GenreUserCount[]
  BookGenres     BookGenres[]

  @@map("genres")
}

model GenreUserCount {
  id      BigInt @id @default(autoincrement()) @db.BigInt
  count   Int    @default(0)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String
  genre   Genre  @relation(fields: [genreId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  genreId BigInt @db.BigInt

  @@map("genre_user_count")
}

model Book {
  id            BigInt       @id @default(autoincrement()) @db.BigInt
  author        Author       @relation(fields: [authorId], references: [id])
  authorId      Int          @map("author_id")
  displayImage  String       @map("display_image")
  title         String
  slug          String
  pageCount     Int          @map("page_count")
  copiesCount   Int          @map("copies_count")
  isbn13        String
  language      BookLanguage @relation(fields: [languageId], references: [id])
  languageId    BigInt       @db.BigInt
  publishedDate DateTime     @map("published_date")
  publisher     Publisher    @relation(fields: [publisherId], references: [id])
  publisherId   BigInt       @map("published_id") @db.BigInt

  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @default(now()) @map("updated_at")
  ListBooks   ListBooks[]
  Favorite    Favorite[]
  Reservation Reservation[]
  BookGenres  BookGenres[]

  @@map("books")
}

model BookGenres {
  id      BigInt @id @default(autoincrement()) @db.BigInt
  book    Book   @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookId  BigInt @db.BigInt
  genre   Genre  @relation(fields: [genreId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  genreId BigInt @db.BigInt

  @@map("book_genres")
}

model Publisher {
  id    BigInt @id @default(autoincrement()) @db.BigInt
  name  String
  books Book[]

  @@map("publishers")
}

model BookLanguage {
  id   BigInt @id @default(autoincrement()) @db.BigInt
  code String
  name String
  book Book[]

  @@map("book_languages")
}

model List {
  id        BigInt      @id @default(autoincrement()) @db.BigInt
  name      String
  user      User        @relation(fields: [userId], references: [id])
  userId    String      @unique @map("user_id")
  ListBooks ListBooks[]
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @default(now()) @map("updated_at")

  @@map("lists")
}

model ListBooks {
  id        BigInt   @id @default(autoincrement()) @db.BigInt
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    BigInt
  list      List     @relation(fields: [listId], references: [id])
  listId    BigInt
  createdAt DateTime @default(now()) @map("created_at")

  @@map("list_books")
}

model Favorite {
  id     BigInt @id @default(autoincrement()) @db.BigInt
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @map("user_id")
  book   Book   @relation(fields: [bookId], references: [id])
  bookId BigInt @db.BigInt

  @@map("favorites")
}

model Reservation {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @map("user_id")
  book   Book   @relation(fields: [bookId], references: [id])
  bookId BigInt @db.BigInt

  fee       BigInt   @default(0) @db.BigInt
  dueDate   DateTime
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("reservations")
}

model StorageSettings {
  version BigInt  @id @default(autoincrement()) @db.BigInt
  baseUrl String  @map("base_url")
  current Boolean @default(false)

  @@map("storage_settings")
}

enum Status {
  PICKUP
  CUSTOMER
  RETURN
  OVERDUE
}

enum Role {
  USER
  ADMIN
}
